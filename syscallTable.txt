int open(const char* pathname,int flag,...);
int creat(const char* pathname,mode_t mode);
ssize_t read(int fd,void* buffer,size_t count);
ssize_t write(inf fd,void* buffer,size_t count);
int close(int fd);
off_t lseek(int fd,off_t offset,int whence);
int fcntl(int fd,int cmd);
int dup(int oldfd);
int dup(int oldfd,int newfd);
int dup3(int oldfd,newfd,int flag);
ssize_t pread(int fd,void* buf,size_t count,off_t offset);
ssize_t pwrite(int fd,const void* buf,size_t count,offset offset);
ssize_t readv(int fd,const struct iovec* iov,int iovcnt);
ssize_t writev(int fd,const struct iovec* iov,int iovcnt);
ssize_t preadv(int fd,const struct iovec* iov,int iovcnt,off_t offset);
ssize_t pwritev(fd,const struct iovec* iov,int iovcnt,off_t offset);
int truncate(const char* pathname,off_t length);
int ftruncate(int fd,off_t length);
int mkstemp(char* template);
FILE* tempfile(void);
pid_t getpid(void);
pid_t getppid(void);
char* getenv(const char* name);
int putenv(char* string);
int setenv(const char* name,const char* value,int overwrite);
int unsetenv(const char* name);
int clearenv(void);
int setjmp(jmp_buf env);
void longjmp(jmp_buf env,int val);
int brk(void* end_data_segment);
void* sbrk(intprt_t increment);
void* malloc(size_t size);
void free(void* ptr);
void calloc(size_t numitems,size_t size);
void* realloc(void* ptr,size_t size);
void* memalign(size_t boundary,size_t size);
int posix_memalign(void** memptr,size_t alignment,size_t size);
void alloca(size_t size);
struct passwd* getpwnam(const char* name);
struct passwd* getpwuid(uid_t uid);
struct group* getgrnam(const char* name);
struct group* getgrgid(gid_t gid);
struct passwd* getpwent(void);
void setpwent(void);
void endpwent(void);
struct spwd* getspnam(const char* name);
struct spwd* getspent(void);
void setspent(void);
void endspent(void);
char* crypt(const char* key.const char* salt);
char* getpass(const char* promptr);
uid_t getuid(void);
uid_t geteuid(void);
gid_t getgid(void);
gid_t getegid(void);
int setuid(uid_t uid);
int setgid(gid_t gid);
int seteuid(uid_t euid);
int setegid(gid_t egid);
int setreuid(uid_t ruid,uid_t euid);
int setregid(gid_t rgid,gid_t egid);
int getresuid(uid_t* ruid,uid_t* euid,uid_t* suid);
int getresgid(gid_t* rgid,uid_t* egid,uid_t* sgid);
int setresuid(uid_t ruid,uid_t euid,uid_t suid);
int setresgid(gid_t rgid,gid_t egid,gid_t sgid);
int setfsuid(uid_t fsuid);
int setfsgid(gid_t fsgid);
int getgroups(int gidsetsize,gid_t grouplist);
int setgroups(size_t gidsetsize,const gid_t* grouplist);
int initgroup(const char* user,gid_t group);
int gettimeifday(struct timeval* tv,struct timezone* tz);
time_t time(time_t* timep);
char* ctime(const time_t timep);
struct tm* gmtime(const time_t* timep);
struct tm* localtime(const time_t* timep);
time_t mktime(struct tm* timeptr);
char* asctime(const struct tm* timeptr);
size_t strftime(char* outstr,size_t maxsize,const char* format,const struct tm* timeptr);
char* stlocale(int category,const char* locale);
long sysconf(int name);
long pathconf(const char* pathname,int name);
long fpathconf(int fd,int name);
int uname(struct utsname* utsbuf);
int setvbuf(FILE* stream,char* buf,int mode,size_t size);
void setbuf(FILE* stream,char* buf);
void setbuffer(FILE* stream,char* buf,size_t size);
int fflush(FILE* stream);
int fsync(int fd);
int fdatasync(int fd);
void sync(void);
int posix_fadvise(int fd,off_t offset,off_t len,int advice);
int fileno(FILE* stream);
FILE* fdopen(int fd,const char* mode);
int mount(const char* cource,const char* target,const char* fstype,unsigned long mountflag,const void* data);
int unmount(const char* target);
int unmount2(const char* target,int flag);
int statvfs(const char* pathname,struct statvfs* statvfsbuf);
int fstatvfs(int fd,struct statvfs* statvfsbuf);
int stat(const char* pathname,struct stat* statbuf);
int lstat(const char* pathname,struct stat* statbuf);
int fstat(int fd,struct stat* statbuf);
int utime(const char* pathname,const struct utimbuf* buf);
int utimensat(int firfd,const char* pathname,const struct timespec times[2],int flag);
int chown(const char* pathname,uid_t owner,gid_t group);
int lchown(const char* pathname,uid_t owner,gid_t group);
int fchown(int fd,uid_t owner,gid_t group);
int access(const char* pathname,int mode);
mode_t umask(mode_t mask);
int chmod(const char* pathname,mode_t mode);
int fchmod(inf fd,mode_t mode);
int setxattr(const char* pathname,const char* name,const void* value,size_t size,int flag);
int lsetxattr(const char* pathname,const char* name,const void* value,size_t size,int flag);
int fsetxattr(int fd,const char* name,const void* value,size_t size,int flag);
ssize_t getxattr(const char* pathname,const char* name,void* value,size_t size);
ssize_t lgetxattr(const char* pathname,const char* name,void* value,size_t size);
ssize_t fgetxattr(int fd,const char* name,void* value,size_t size);
int removexattr(const char* pathname,const char* name);
int lremovexattr(const char* pathname,const char* name);
int fremovexattr(int fd,const char* name);
ssize_t listxattr(const char* pathname,char* list,size_t size);
ssize_t llistxattr(const char* pathname,char* list,size_t size);
ssize_t flistxattr(int fd,char* list,size_t size);
int link(const char* oldpath,const char* newpath);
int unlink(const char* pathname);
int rename(const char* oldpath,const char* newpath);
int symlink(const char* filepath,const char* linkpath);
ssize_t readlink(const char* pathname,char* buffer,size_t bufsiz);
int mkdir(const char* pathname,mode_t mode);
int rmdir(const char* pathname);
int remove(const char* pathname);
DIR* opendir(const char* dirpath);
DIR* fdopendir(int fd);
struct dirent* readdir(Dir* dirp);
void rewinddir(DIR* dirp);
int closedir(DIR* dirp);
int firfd(DIR* dirp);
char* getcwd(char* cwdbuf,size_t size);
int chdir(const char* pathname);
int fchdir(int fd);
int chroot(const char* pathname);
char* realpath(const char* pathname,char* resolved_path);
char* dirname(char* pathname);
char* basename(char* pathname);


